脚本格式要求:
1) 脚本以#!/bin/bash开头(告知系统当前这个脚本要使用的shell解释器)
2) 脚本需要有可执行权限

mkdir xxx 创建目录
cd xxx 进入目录
touch xxx 创建文件
vi xxx 创建文件并直接编辑
chmod u+x xxx.sh 增加权限(不增加权限时运行需要使用sh xxx.sh)
set 显示当前shell中的所有变量(变量分为系统变量和用户自定义变量)
变量名=值 定义变量
unset 变量名 撤销变量
readonly 变量名=xxx 声明静态变量(不能unset)
echo 变量名=$变量名(echo "变量名=$变量名") 输出变量名=xxx
变量名='date'(A=$(date)) 运行里面的命令，并把结果返回给变量
export 变量名=xxx 将变量转化为全局变量, shell关闭后会清除
在文件中定义环境变量后
  source(.) 文件名 可以使用文件中定义的环境变量(相当于先运行一遍文件中的代码)
多行注释
  :<<! (单独一行)
    内容
    !  (单独一行)
基本语法
  $n n为数字
  $0 代表命令本身
  $1-$9 代表第一到第九个参数
  ${10} 十以上的参数要用大括号包含
  $* 代表命令行中所有的参数(把所有的参数看成一个整体)
  $@ 代表命令行中所有的参数(把每个参数区分对待)
  $# 代表命令行中所有的参数的个数
  在文件中使用$1时，可以在shell中赋值(echo 1=$1)(sh test.sh abc)(输出 1=abc)
预定义变量(可以直接在shell脚本中使用)
  $$ 获取当前进程的进程号
  $! 获取后台运行的最后一个进程的进程号
  $? 查上一次命令是成功了还是失败了(为0则正确执行，非0则执行不正确)
& 表示在后台运行
$((运算式)) 或 $[运算式] 或 expr 运算式 (使用expr时运算式中的运算符左右要有空格)
如果希望将expr的结果赋给某个变量需要使用'expr xxx + xxx'

if语句
  if [ condition ]
  then
  ...
  elif [ condition ]
  ...
  else
  ...
  fi
[ condition ] (前后有空格, 非空为true)
[ hspEdu ] true
[  ] false
[ 1 -lt 5 ] true
条件
1) = 字符串比较
2) 比大小
  -lt 小于
  -le 小于等于
  -eq 等于
  -gt 大于
  -ge 大于等于
  -ne 不等于
3) 按照文件权限进行判断
  -r 有读的权限
  -w 有写的权限
  -x 有执行的权限
4) 按照文件类型进行判断
  -f 文件存在并且是一个常规的文件
  -e 文件存在
  -d 文件存在并是一个目录

case语句
  case $变量名 in
  "值1")
  ...
  ;;
  case $变量名 in
  "值2")
  ...
  ;;
  esac

for语句
  for 变量名 in 值1 值2 值3...
  do
  ...
  done

  for((初始值; 判断; 变量变化))
  do
  ...
  done

while语句
  while [ condition ]
  do
  ...
  done

read(选项)(参数) 读取控制台输入
选项
  -p 指定读取时的提示符
  -t 指定读取时等待的时间
参数 指定读取值的变量名
(read -t 10 -p "请输入一个数 NUM=" NUM)

函数
系统函数
basename 返回完整路径最后/的部分, 常用于获取文件名
dirname 返回完整路径最后/的部分, 常用于返回路径部分
自定义函数
function 函数名(){
  ...
}
函数名 (调用自定义函数)
