day01 2022.12.13      java      安装了2022.3版本的IDEL 安装了OracleJDK11，配置了环境变量，不过IDEL似乎不需要自己更改环境变量，若使用Eclipse则需要
                                点击行数旁边可设置断点，右键断点可进行编辑
                                ex3.1: static的用法(https://blog.csdn.net/Ambition_ZM/article/details/101705741)

day02 2022.12.14      java      ex3.1: 类的属性为全局变量(s1)，方法中的属性为局部变量(s2)
                                       print()输出完毕后不换行，而println()输出完毕后会换行  char用于储存单个字符 String用于储存字符串 " "表示字符串 ' '表示单个字符 char x='a'
                                       char与int可以通过Unicode相互转换  在println中可以使用(int)word来让word变为整数型  boolean定义布尔类型

day03 2022.12.15      java      3.2:   整明白了IDEA中项目与模块的关系，重新创建了JAVA项目  python的**与//运算符无法在java中使用，若想要进行幂运算需要使用Math.pow(底数，指数)
                                       long型需要在数的后面加上L/l  float型需要在数的后面加上F/f  可以使用<final 数据类型 常量名称 [= 值]>声明常量，且必须在定义时就设置初值
                                3.3:   在类体中声明的变量为乘员变量，乘员变量在整个类中都有效(全局)  在类的方法体中声明的变量为局部变量，只在当前代码块中有效
                                       乘员变量前加static即为静态变量(类变量)，可以通过类名.静态变量进行跨类使用，否则即为实例变量
                                       一个java文件可以有多个类，但只能有一个public类，且需要与文件名一致(类似于main()) 所以java文件中的其他类是为public类做修饰的

day04 2022.12.16      java      3.4:   import java.util.Scanner;调用扫描器  使用Scanner 变量 = new Scanner(System.in)创建扫描器，获取控制台输入的值  使用 变量.next数据类型()来接收数值/字符串
                                       nextline()接收字符串遇到空格时不会停止 next()遇到空格时会停止    三元运算:boolean b=1>2?true:false 若1>2则b为true，否则为false，可换成其他数据类型
                                       b = ++a 先将a的值+1，然后赋给b  b = a++ 先将a的值赋给b，然后a的值+1  &&逻辑与(and) ||逻辑或(or)
                                3.5:   隐式/显示类型转换
                                3.6:   //单行注释   /*  */多行注释   /**  */文档注释

day05 2022.12.17      java      4.1:   { }复合语句，可以在里面创建临时变量
                                4.2:   if(布尔表达式){语句序列} else if(){} else{}  if语句格式
                                       switch(表达式){case 常量值1: 语句块1; break; ... default: 语句块n; break;}   switch语句格式 case后不能为非整数的实数，没写语句块的case会使用下一个语句块。
                                4.3:   while(语句表达式){语句序列}  do{语句序列}while(语句表达式);  for(表达式1;表达式2;表达式3){语句序列} 1:变量初始化 2:循环条件 3:改变变量  两种循环
                                       for(元素类型x:遍历对象obj){引用了x的java语句;}  foreach语句(和python中的for i in x差不多?)

day06 2022.12.18      java      4.4：  break中断循环  continue立刻执行下一次循环  标签名: 循环体+break 标签名中断外层循环(continue用法与break相同)
                                4.5：  String a = String.valueOf(x)可以将x转换为字符串形式

day07 2022.12.19      java      5.2:   类型 数组名[]; 创建数组 + 数组名=new 类型[元素个数]; 分配内存空间    数组初始化例:int arr[]={11,25,37,42,678};
                                       以上两条可以合并成: 类型 数组名[]=new 类型[元素个数];                          int arr[]=new int[]{11,25,37,42,678};
                                5.3:   .length可以判断长度    二维数组与一维相似int arr[]=new int[2][4]                int arr[][]={{0,1}{0,1}};
                                5.4:   import java.util.Arrays Arrays.fill(数组名, 起始位置, 结束位置, 元素2); 可将数组中指定位置的元素1替换为元素2,不填起始与结束位置则为全部
                                       Arrays.sort(数组名); 可对数组进行升序排序  Arrays.copyOf(数组名,长度);和Arrays.copyOfRange(数组名,起始位置,结束位置);可复制数组中元素
                                       Arrays.binarySearch(数组名,起始位置,结束位置,key); 可在数组中查找key,并返回索引值 (使用前最好进行排序,不指定位置则为全部位置)

day08 2022.12.22      java      5.5:   冒泡排序:依次进行比大小(1和2,1和3,1和4...)
                                       直接选择排序:从目标中直接选出想要的进行排序
                                       反转排序:前后顺序颠倒
                                5.6:   sc.next().charAt(0)可以接收字符串

day09 2022.12.24      java      6.1:   面向对象
                                6.2:   类 private 类型 名字;可以创建私有成员变量   成员方法的语法格式:权限修饰符 (void(无返回值)) 返回值类型 方法名(参数类型 参数名){方法体;  return 返回值;}
                                       权限修饰符的具体说明见书P97 (不填写权限修饰符时默认为protected)
                                       this可以调用成员变量和成员方法

day10 2022.12.25      java      6.3:   类的构造方法:1.没有返回值 2.名称要与本类名称相同
                                6.4:   static{...}静态代码块，在执行类时(只)会被执行一次
                                       注意几点:1.静态方法中不可以使用this    2.静态方法中不可以调用非静态方法    3.局部变量不可以使用static    4.主方法必须用static    5.只有内部类可以使用static
                                6.5:   主方法的行参是数组，所以是String[] args的形式，可以用args.length获取参数的个数
                                6.6:   通过new来创建对象,每实例化一个对象就会自动调用一次构造方法(和python相同)    类名 对象的引用变量=new 类名(参数) 使用引用变量进行调用参数(d1.xxx)
                                       java的垃圾回收 finalize()跳过一次回收 System.gc()强制进行一次垃圾回收

day11 2023.01.11      java      6.6:   习题

day12 2023.01.13      java      7.1:   单继承:class Child extends Parent{}   子类可以调用父类的属性和方法
                                7.2:   Objext类:getClass()返回对象执行时的Class实例   toString()将一个对象返回为字符串形式，通常会进行重写P115   equals()比较两个对象的实际内容

day13 2023.01.14      java      7.3:   向上转型:父类 父类对象 = new 子类(); People tom = new teacher();   父类的对象无法调用子类独有的属性或者方法。安全
                                       向下转型:子类 子类对象 = (子类) 父类对象; Pigeon pigeon = (Pigeon) bird;   父类对象要先引用这个子类对象。不安全
                                7.4:   instanceof判断一个实例对象是否属于一个类 当s为Square类时 System.out.println(s instanceof Quadrangle)会输出true

day14 2023.01.16      java      7.5:   方法的重载:参数的顺序/类型/数量不同，即可构成重载  定义不定长参数可以使用 返回值类型 方法名(参数类型...参数名称)<public static int add(int...a){}>
                                       编译器会将int...a看做是int[]a
                                7.6:   final关键字:
                                                  final定义的变量不可被更改
                                                  final定义的方法可以防止子类修改父类的定义与实现方式(private与其相同，所以无需定义private后再定义为final)
                                                  final定义的类不能被继承

day15 2023.01.18      java      7.7:   多态:习题
                                7.8:   抽象abstract:该关键字可以定义抽象类与抽象方法，承载抽象方法的抽象类必须被继承
                                       接口interface:该关键字可以定义接口,可以将xx方法封装到接口中，使需要xx方法的的类实现这个接口，同时继承抽象类
                                       继承父类的同时实现一个接口:public class 子类 extends 父类 implements 接口{}
                                       一个接口可以继承另一个接口:interface 子接口 extends 父接口
                                       public与static的理解(https://blog.csdn.net/v7595v/article/details/45845347)

day16 2023.01.19      java      7.9:   super关键字可以在子类的构造方法中显示地调用父类的构造方法，super()必须为子类构造函数中的第一行。
                                       向下转型的意义(https://blog.csdn.net/helpluozhao123/article/details/117765890)
